version: '3.8'

services:
  backend:
    build: ./backend
    ports: ["9000:80"]
    volumes:
      - ./backend:/var/www/html
      - /var/www/html/vendor  # Evita conflictos con vendor en el host
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      DB_HOST: mysql
      DB_PORT: "3306"
      DB_DATABASE: chat_db
      DB_USERNAME: root
      DB_PASSWORD: secret
      BROADCAST_DRIVER: pusher
      PUSHER_APP_ID: "12345"
      PUSHER_APP_KEY: app-key
      PUSHER_APP_SECRET: app-secret
      PUSHER_APP_CLUSTER: mt1
      PUSHER_HOST: pusher
      PUSHER_PORT: "6001"  # Coincide con Soketi
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      pusher:
        condition: service_started
    networks: [app-network]
    restart: unless-stopped  # Reinicio automático

  mysql:
    image: mysql:8.0
    ports: ["3306:3306"]
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: chat_db
    volumes: [mysql_data:/var/lib/mysql]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 20s
      retries: 10
    networks: [app-network]
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports: ["6379:6379"]
    volumes: [redis_data:/data]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks: [app-network]
    restart: unless-stopped
      
  pusher:
    image: quay.io/soketi/soketi:latest
    ports:
      - "6001:6001"  # WebSockets
      - "9601:9601"  # Métricas
    environment:
      SOKETI_DEFAULT_APP_ID: "12345"
      SOKETI_DEFAULT_APP_KEY: app-key
      SOKETI_DEFAULT_APP_SECRET: app-secret
      SOKETI_DEFAULT_APP_ENABLE_CLIENT_MESSAGES: "true"  # Permite mensajes entre clientes
    networks: [app-network]
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports: ["3000:3000"]
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NEXT_PUBLIC_API_URL: http://backend:9000  # Usa el nombre del servicio
      NEXT_PUBLIC_PUSHER_APP_KEY: app-key
      NEXT_PUBLIC_PUSHER_HOST: pusher  # Nombre del servicio interno
      NEXT_PUBLIC_PUSHER_PORT: "6001"
      NEXT_PUBLIC_PUSHER_CLUSTER: mt1
      NEXT_PUBLIC_PUSHER_TLS: "false"
    depends_on: [backend]
    networks: [app-network]
    restart: unless-stopped

networks:
  app-network:
    driver: bridge
    attachable: true  # Permite conectar contenedores adicionales

volumes:
  mysql_data:  # Persistencia de MySQL
  redis_data:   # Persistencia de Redis